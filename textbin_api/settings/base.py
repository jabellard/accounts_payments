'''
Django settings for textbin_api project.

Generated by 'django-admin startproject' using Django 2.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
'''

import os
import sys

# ==============================================================================
# Directory
# ==============================================================================
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# for root apps folder
sys.path.insert(0, os.path.join('BASE_DIR', 'apps'))

# Absolute filesystem path to the directory that will hold user-uploaded files
MEDIA_ROOT = os.path.join(BASE_DIR, 'www', 'media')

# URL that handles the media served from MEDIA_ROOT
MEDIA_URL = '/media/'

ROOT_URLCONF = 'textbin_api.urls'
# ------------------------------------------------------------------------------

SECRET_KEY = '(nksm2x=ovtq5!*@mz**!ban^c(x94nu9u!(%h1@)ilitrc45y'


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/


AUTH_USER_MODEL = 'accounts.User'

FIXTURE_DIRS = [
    os.path.join(BASE_DIR, 'fixtures'),
]

# ==============================================================================
# rest_auth and allauth
# ==============================================================================
REST_AUTH_SERIALIZERS = {
    'LOGIN_SERIALIZER': 'apps.accounts.serializers.LoginSerializer',
    'TOKEN_SERIALIZER': 'apps.accounts.serializers.TokenSerializer',
    'JWT_SERIALIZER': 'apps.accounts.serializers.JWTSerializer',
    'PASSWORD_RESET_SERIALIZER': 'apps.accounts.serializers.PasswordResetSerializer',
    'PASSWORD_RESET_CONFIRM_SERIALIZER': 'apps.accounts.serializers.PasswordResetConfirmSerializer',
    'PASSWORD_CHANGE_SERIALIZER': 'apps.accounts.serializers.PasswordChangeSerializer',
}

REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'apps.accounts.serializers.RegisterSerializer',
}

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
    }
}

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'admin@localhost.com'

OLD_PASSWORD_FIELD_ENABLED = True

ACCOUNT_USER_MODEL_USERNAME_FIELD = 'username'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'username'

LOGOUT_ON_PASSWORD_CHANGE = True

# ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
# ------------------------------------------------------------------------------


# ==============================================================================
# pinax_stripe
# ==============================================================================
ALLOWED_HOSTS = [
    '*',  # to resolve problem of ngrok being blocked
]
# Go to https://stripe.com/ and grab your keys and put here
PINAX_STRIPE_SECRET_KEY = 'sk_test_R8uFPHy4C7ioLcymd8BrpeLe'
PINAX_STRIPE_PUBLIC_KEY = 'pk_test_9Zq7MwBD0WLtEeXAJklPR6bv'

PINAX_STRIPE_INVOICE_FROM_EMAIL = 'billing@localhost.com'
PINAX_STRIPE_SEND_EMAIL_RECEIPTS = False
# ------------------------------------------------------------------------------


SITE_ID = 1
# SITE_ID = int(os.environ.get('SITE_ID', 1))

INSTALLED_APPS = [
    # ------------------------django------------------
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sites',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # ------------------------external--------------------
    'rest_framework',
    'rest_framework_filters',
    # 'django_filters',
    'rest_framework.authtoken',
    'rest_auth',
    'allauth',
    'allauth.account',
    'rest_auth.registration',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'django_extensions',
    'pinax.stripe',
    'pinax.eventlog',
    # -------------------local----------------
    'apps.accounts',
    'apps.administration',
    'apps.documentation',
    'apps.payments',
]


# ==============================================================================
# Graph models
# ==============================================================================
# Graph models command fromm django-extensions
GRAPH_MODELS = {
    'all_applications': True,
    'group_models': True,
}
# ------------------------------------------------------------------------------

# ==============================================================================
# Django Rest Framework
# ==============================================================================
REST_FRAMEWORK = {

    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,

    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication'
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework_filters.backends.ComplexFilterBackend',
    ),
}
# ------------------------------------------------------------------------------

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ==============================================================================
# Deployment
# ==============================================================================

# ------------------------------------------------------------------------------

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'apps.accounts/templates'),
            os.path.join(BASE_DIR, 'apps.documentation/templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'textbin_api.wsgi.application'


if 'RDS_DB_NAME' in os.environ:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ['RDS_DB_NAME'],
            'USER': os.environ['RDS_USERNAME'],
            'PASSWORD': os.environ['RDS_PASSWORD'],
            'HOST': os.environ['RDS_HOSTNAME'],
            'PORT': os.environ['RDS_PORT'],
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }


ADMIN_URL = 'admin:index'
CONTACT_EMAIL = 'support@localhost.com'

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'www', 'static')
STATIC_URL = '/static/'
